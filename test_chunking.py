#!/usr/bin/env python3
"""
Test script for the adaptive chunking functionality.

This script tests the new chunking logic that splits large MCP responses
into multiple content blocks to avoid token limits.
"""

import sys
import os
from pathlib import Path

# Add the multi_agent_research_system to the path
sys.path.append(os.path.join(os.path.dirname(__file__), 'multi_agent_research_system'))

from mcp_tools.enhanced_search_scrape_clean import create_adaptive_chunks

def test_chunking_function():
    """Test the chunking function with various content sizes."""
    print("🧪 Testing Adaptive Chunking Function")
    print("=" * 50)

    # Test 1: Small content (should not be chunked)
    print("\n📝 Test 1: Small content (no chunking expected)")
    small_content = """# Search Results

**Query**: test query
**Results**: 5 sources found

## Article 1
This is a short article content.
"""

    chunks = create_adaptive_chunks(small_content, "test query")
    print(f"Content length: {len(small_content)} characters")
    print(f"Chunks created: {len(chunks)}")
    print(f"Expected: 1 chunk")
    print(f"✅ Test 1 {'PASSED' if len(chunks) == 1 else 'FAILED'}")

    # Test 2: Large content (should be chunked)
    print("\n📝 Test 2: Large content (chunking expected)")

    # Create a large content string
    large_content = """# Expanded Query Search Results

**Original Query**: artificial intelligence healthcare applications recent developments 2024
**Search Type**: search
**Processing**: Corrected query expansion workflow with master result consolidation

## 📋 Search Results Summary

| # | Title | Source | Date | Relevance |
|---|-------|--------|------|-----------|
| 1 | AI in Healthcare: Latest Trends | TechNews | 2024-03-15 | 0.95 |
| 2 | Healthcare AI Applications | HealthTech | 2024-03-14 | 0.92 |
| 3 | Machine Learning in Medicine | MedNews | 2024-03-13 | 0.88 |

## 📄 Full Cleaned Content

"""

    # Add multiple large articles to exceed the chunk limit
    for i in range(1, 6):
        article_content = f"""
## 🌐 {i}. Article Title Here - AI in Healthcare Applications

**URL**: https://example.com/article-{i}
**Extraction Date**: 2024-03-15 10:00:00
**Content Length**: 5000 characters
**Processing**: ✅ Cleaned with GPT-5-nano

### 📄 Full Cleaned Content

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.

" *{'This is a large article content that discusses the latest developments in artificial intelligence applications in healthcare. ' * 100}* "

Recent breakthroughs in machine learning algorithms have revolutionized how we approach medical diagnosis and treatment planning. Healthcare providers are increasingly adopting AI-powered tools to improve patient outcomes and streamline operational efficiency. From diagnostic imaging to drug discovery, artificial intelligence is transforming every aspect of modern healthcare delivery.

The integration of AI technologies in healthcare settings presents both unprecedented opportunities and significant challenges. Privacy concerns, regulatory compliance, and the need for robust validation frameworks must be carefully addressed to ensure responsible implementation.

---

"""
        large_content += article_content

    large_content += """
## 📊 Processing Summary

- **Original Query**: artificial intelligence healthcare applications recent developments 2024
- **Expanded Queries**: 3 queries executed
- **Master Results Found**: 15 unique URLs
- **URLs Successfully Crawled**: 5
- **Processing**: Expanded query search + content extraction
- **Total Processing Time**: 45.2 seconds
- **Deduplication Applied**: Yes (URL-based)

*Generated by Multi-Agent Research System - Expanded Query Search Integration*
"""

    print(f"Content length: {len(large_content)} characters")
    chunks = create_adaptive_chunks(large_content, "artificial intelligence healthcare applications")
    print(f"Chunks created: {len(chunks)}")
    print(f"Expected: Multiple chunks (> 1)")
    print(f"✅ Test 2 {'PASSED' if len(chunks) > 1 else 'FAILED'}")

    # Test 3: Validate chunk structure
    print("\n📝 Test 3: Validate chunk structure and headers")
    for i, chunk in enumerate(chunks[:3]):  # Check first 3 chunks
        content = chunk["text"]
        print(f"Chunk {i+1}:")
        print(f"  Type: {chunk['type']}")
        print(f"  Length: {len(content)} characters")
        print(f"  Has part header: {'Part' in content}")
        print(f"  Has continuation marker: {'Continued' in content or 'Complete' in content}")

        # Validate chunk size is reasonable
        if len(content) > 20000:  # Our max chunk size is 18000, plus some header
            print(f"  ⚠️  Warning: Chunk exceeds expected size limit")
        else:
            print(f"  ✅ Chunk size within limits")

    # Test 4: Edge case - exact boundary content
    print("\n📝 Test 4: Edge case - content near boundary")
    boundary_content = "A" * 17500  # Just under our 18000 limit
    boundary_content = f"# Test Content\n\n{boundary_content}\n\nEnd of content."

    chunks = create_adaptive_chunks(boundary_content, "boundary test")
    print(f"Content length: {len(boundary_content)} characters")
    print(f"Chunks created: {len(chunks)}")
    print(f"Expected: 1 chunk (under limit)")
    print(f"✅ Test 4 {'PASSED' if len(chunks) == 1 else 'FAILED'}")

    print("\n" + "=" * 50)
    print("🏁 Chunking Function Tests Complete")

    # Summary
    test_results = [
        len(chunks) == 1,  # Test 1
        len(create_adaptive_chunks(large_content, "test")) > 1,  # Test 2
        all(chunk["type"] == "text" for chunk in chunks),  # Test 3 part 1
        len(create_adaptive_chunks(boundary_content, "test")) == 1  # Test 4
    ]

    passed_tests = sum(test_results)
    total_tests = len(test_results)

    print(f"📊 Overall Results: {passed_tests}/{total_tests} tests passed")

    if passed_tests == total_tests:
        print("✅ All tests passed! Chunking function is working correctly.")
        return True
    else:
        print("⚠️  Some tests failed. Please review the implementation.")
        return False

if __name__ == "__main__":
    success = test_chunking_function()
    sys.exit(0 if success else 1)